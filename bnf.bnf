<program>  ::= <stmt_list> 


    <stmt_list>  ::=  <stmt> SEMICOLON
		              | <stmt_list stmt> SEMICOLON  


    <stmt>   ::= <declaration_stmt>
		| <assign_stmt>
		| <init_stmt>
		| <if_stmt>
		| <loop_stmt>
    | <expr> 

    
    <declaration_stmt>   ::= <funct_declaration> 
		| <var_declaration> 
    <var_declaration_list>   ::= <var_declaration> 
		| <var_declaration_list> <var_declaration>
    <var_declaration>   ::= TYPE  IDENTIFIER 

    <funct_declaration>   ::= FUNCTION IDENTIFIER LP <var_declaration_list> RP  TYPE LCB <stmt_list> RETURN <expr> SEMICOLON RCB
                          | FUNCTION IDENTIFIER LP var_declaration_list RP LCB stmt_list RCB 
    

     <assign_stmt> ::= SWITCH INN <logic_expr>
                | IDENTIFIER EQ <expr>
                | IDENTIFIER OUT IDENTIFIER
                | IDENTIFIER INN <expr>
                | <sensor_expr> OUT IDENTIFIER


    <init_stmt>   ::= TYPE <assign_stmt> 


    <if_stmt> ::= IF LP <logic_expr> RP LCB <stmt_list> RCB
              | IF LP <logic_expr> RP LCB <stmt_list> RCB ELSE LCB <stmt_list> RCB 
   
   
    <loop_stmt>   ::= <while_stmt> 
		    | <for_stmt>  
    <while_stmt>   ::= WHILE LP <logic_expr> RP   <stmt. 
		    |  WHILE LP <logic_expr> RP    LCB  <stmt_list> RCB    
    <for_stmt>   ::= FOR LP <init_stmt> SEMICOLON  <logic_expr> SEMICOLON  <stmt>  RP LCB <stmt_list> RCB
    | FOR LP <init_stmt> SEMICOLON <logic_expr> SEMICOLON  <stmt>  RP <stmt> 
      

    <expr>   ::= <arithmetic_expr> | <url_expr> 


    <url_expr> ::= URLSTRING 

    <logic_expr> ::=  <logic_expr> LAND <logic_expr>
          | <logic_expr> LOR <logic_expr>
          | <logic_expr> LEQ <logic_expr>
          | <logic_expr> LNEQ <logic_expr>
          | <logic_expr> LT <logic_expr>
          | <logic_expr> LTE <logic_expr>
          | <logic_expr> GT <logic_expr>
          | <logic_expr> GTE <logic_expr>
    | LNOT LP <logic_expr> RP
    | BOOL_LITERAL
    | INT_LITERAL
    | FLOAT_LITERAL
    | STRING_LITERAL
    | IDENTIFIER 

    <arithmetic_expr>   ::= <arithmetic_expr> PLUS <arithmetic_expr>
    | <arithmetic_expr> MINUS <arithmetic_expr>
    | <arithmetic_expr> MUL <arithmetic_expr>
    | <arithmetic_expr> DIV <arithmetic_expr>
    | <logic_expr>
    | <func_call_expr>
    | <sensor_expr>
    | <arithmetic_expr> RP
  


    <sensor_expr>    ::= SENSOR LSB  <arithmetic_expr> RSB



     <func_call_expr>    ::=  IDENTIFIER  LP  <parameter_list>  RP
                         | IDENTIFIER  LP RP
                         | DISCONNECT_FUNC LP IDENTIFIER RP
                         | CONNECT_FUNC LP IDENTIFIER RP
                         | LOG_FUNC LP <expr> RP
                         | ERROR_FUNC LP <expr> RP
                         | TIME_FUNC LP RP      
     
     <parameter_list>    :  <expr>
		 |   <expr> COMMA <parameter_list> 